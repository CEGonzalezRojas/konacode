class KonamiCode{constructor(options){if(window.ko_co)return;window.ko_co=this;this.append_styles();this.step=0,this.count=0;this.last_x=0;this.last_y=0;this.options={max:-1,event:"keyup",mobile_event_start:["mousedown","touchstart"],mobile_event_end:["mouseup","touchend"],secuence:[38,38,40,40,37,39,37,39,66,65],mobile_secuence:[],valid_keys:{"A":65,"B":66,"X":88,"Y":89,"UP":38,"DOWN":40,"LEFT":37,"RIGHT":39},need_keyboard:[65,66,88,89],callback:null,};if(options&&typeof options=="object"&&!Array.isArray(options)){if(options.max&&parseInt(options.max)){this.options.max=parseInt(options.max)}
if(options.event&&typeof options.event=="string"){this.options.event=options.event}
var keys=Object.keys(this.options.valid_keys);var values=Object.values(this.options.valid_keys);if(options.secuence&&Array.isArray(options.secuence)&&options.secuence.length>1){options.secuence=options.secuence.map(o=>o.toUpperCase?o.toUpperCase():o);options.secuence=options.secuence.filter(o=>keys.indexOf(o)!=-1||values.indexOf(o)!=-1);if(options.secuence.length>1){this.options.secuence=[];options.secuence.forEach(o=>this.options.secuence.push(parseInt(o)?parseInt(o):this.options.valid_keys[o]))}}
this.options.secuence.forEach(o=>this.options.mobile_secuence.push(keys[values.indexOf(o)]));if(options.callback&&typeof options.callback=="function"){this.options.callback=options.callback}}
window.addEventListener(this.options.event,this.handler,{passive:!0});this.options.mobile_event_start.forEach(event=>window.addEventListener(event,this.mobile_handler_start,{passive:!0}));this.options.mobile_event_end.forEach(event=>window.addEventListener(event,this.mobile_handler_end,{passive:!0}))}
handler(e){if(!window.ko_co||!e.keyCode)return;var continue_flag=!0;var key=e.keyCode;if(key!==window.ko_co.options.secuence[window.ko_co.step])continue_flag=!1;if(!continue_flag){window.ko_co.reset();return}
window.ko_co.request_keyboard(window.ko_co.step+1);if(++(window.ko_co.step)>=window.ko_co.options.secuence.length){window.ko_co.do()}}
mobile_handler_start(e){if(!window.ko_co||window.ko_co.snes_joystick)return;window.ko_co.last_x=e.clientX||(e.originalEvent?e.originalEvent.pageX:0)||(e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].clientX:0);window.ko_co.last_y=e.clientY||(e.originalEvent?e.originalEvent.pageY:0)||(e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].clientY:0)}
mobile_handler_end(e){if(!window.ko_co||window.ko_co.snes_joystick)return;var move_x=e.clientX||(e.originalEvent?e.originalEvent.pageX:0)||(e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].clientX:0);var move_y=e.clientY||(e.originalEvent?e.originalEvent.pageY:0)||(e.changedTouches&&e.changedTouches[0]?e.changedTouches[0].clientY:0);var continue_flag=!0;switch(window.ko_co.options.mobile_secuence[window.ko_co.step]){case "UP":if(move_y>=window.ko_co.last_y)continue_flag=!1;break;case "DOWN":if(move_y<=window.ko_co.last_y)continue_flag=!1;break;case "LEFT":if(move_x>=window.ko_co.last_x)continue_flag=!1;break;case "RIGHT":if(move_x<=window.ko_co.last_x)continue_flag=!1;break;default:if(e.key!==window.ko_co.options.mobile_secuence[window.ko_co.step])continue_flag=!1;break}
if(!continue_flag){window.ko_co.reset();return}
window.ko_co.request_keyboard(window.ko_co.step+1);if(++(window.ko_co.step)>=window.ko_co.options.secuence.length){window.ko_co.do()}}
do(){this.step=0;this.count++;if(this.options.max!=-1&&this.count>=this.options.max){window.removeEventListener(this.options.event,this.handler)}
if(this.options.callback&&typeof this.options.callback=="function"){this.options.callback(!0);window.addEventListener("click",this.cancel);window.addEventListener("keyup",this.cancel)}}
reset(){this.step=0;this.keyboard(!1)}
cancel(e){if(!window.ko_co||!window.ko_co.options.callback||typeof window.ko_co.options.callback!="function")return;window.removeEventListener("click",window.ko_co.cancel);window.removeEventListener("keyup",window.ko_co.cancel);window.ko_co.options.callback(!1)}
request_keyboard(step){if(this.options.need_keyboard.indexOf(this.options.secuence[step])!=-1){this.keyboard(!0)}
else{this.keyboard(!1)}}
keyboard(show){if(show){if(this.snes_joystick)return;this.snes_joystick=this.snes_joystick_generator();document.body.append(this.snes_joystick);setTimeout(e=>this.snes_joystick.classList.add("active"),100)}
else{if(this.snes_joystick){var last_keyboard=this.snes_joystick;this.snes_joystick=null;last_keyboard.addEventListener("transitionend",e=>{last_keyboard.remove()});last_keyboard.classList.remove("active")}}}
snes_joystick_generator(){var joystick=new DOMParser().parseFromString(`<div class="snes"><div class="right"></div><div class="right d"></div><div class="back"></div><div class="front"></div><div class="patch"><div n></div><div s></div><div st></div></div><div class="circle"></div><div class="buttons"><div y></div><div x></div></div><div class="buttons down"><div b></div><div a></div></div></div>`,'text/html').body.firstChild;var buttons=joystick.querySelectorAll(".buttons > div");Array.from(buttons).forEach(btn=>{btn.addEventListener("animationend",e=>{btn.removeAttribute("clicked")});btn.addEventListener("click",e=>{btn.setAttribute("clicked",!0);e.stopPropagation();var keyCode=this.options.valid_keys[btn.attributes[0].name.toUpperCase()];if(keyCode){this.handler({keyCode:keyCode})}})});return joystick}
append_styles(){var link=document.createElement("LINK");link.href=`${KonamiCode.source_url}kc.min.css`;link.type="text/css";link.rel="stylesheet";document.querySelector("head").appendChild(link)}}
KonamiCode.source_url=(src=>{src.pop();return `${src.join("/")}/`})(document.currentScript.src.split("/"))